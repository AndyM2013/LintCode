// 93. Balanced Binary Tree
// Given a binary tree, determine if it is height-balanced.

// For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

// Example
// Given binary tree A = {3,9,20,#,#,15,7}, B = {3,#,20,15,7}

// A)  3            B)    3 
//   / \                  \
//   9  20                 20
//     /  \                / \
//   15   7              15  7
   
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */


public class Solution {
    /*
     * @param root: The root of the binary search tree.
     * @param node: insert this node into the binary search tree
     * @return: The root of the new binary search tree.
     */
    public TreeNode insertNode(TreeNode root, TreeNode node) {
        // write your code here
        if(root == null){
          return node;
        }
        
        TreeNode pre = null;
        TreeNode current = root;
        
        while (current != null){
          pre == current;
          current = root.val > node.val? root.left: root.right;
        }
        
        if(pre.val > node.val){
          pre.left = node;
        } else {
          pre.right = node;
        }
        return root;
    }
}

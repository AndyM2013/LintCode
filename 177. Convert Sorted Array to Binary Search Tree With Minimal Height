// 177. Convert Sorted Array to Binary Search Tree With Minimal Height
// Given a sorted (increasing order) array, Convert it to create a binary tree with minimal height.

// Example
// Given [1,2,3,4,5,6,7], return

//     4
//   /   \
//   2     6
// / \    / \
// 1   3  5   7

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /*
     * @param A: an integer array
     * @return: A tree node
     */
    public TreeNode sortedArrayToBST(int[] A) {
        // write your code here
        if(A == null || A.length == 0){
          return null;
        }
        return helper(A, 0, A.length - 1);
    }
    
    private TreeNode helper(int[] A, int start, int end){
      if(start > end){
        return null;
      }
      if(start == end){
        return new TreeNode(A[start]);
      }
      int mid = start + (end - start) / 2;
      TreeNode root = new TreeNode(A[mid]);
      root.left = helper(A, start, mid - 1);
      root.right = helper(A, mid + 1, end);
      return root;
    }
}

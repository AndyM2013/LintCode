/*
 *
  225. Find Node in Linked List
  Find a node with given value in a linked list. Return null if not exists.

  Example
  Given 1->2->3 and value = 3, return the last node.

  Given 1->2->3 and value = 4, return null.
 */
 
 /**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */


public class Solution {
    /*
     * @param head: the head of linked list.
     * @param val: An integer.
     * @return: a linked node or null.
     */
    public ListNode findNode(ListNode head, int val) {
        // write your code here
        ListNode node = head;
        while(node != null){
            if (node.val == val){
                return node;
            }
            node = node.next;
        }
        return null;
    }
}


//solution version 2, provided by JiuZhang
public class Solution {
    /**
     * @param head: the head of linked list.
     * @param val: an integer
     * @return: a linked node or null
     */
    public ListNode findNode(ListNode head, int val) { 
        for (ListNode node = head; node != null; node = node.next) {
            if (node.val == val) {
                return node;
            }
        }
        return null;
    }  
}

/**
 *546. Implement Queue by Interface
  Implement queue by interface.
  
  Excemple:
  push(1)
  pop()     // return 1
  push(2)
  push(3)
  top()     // return 2
  pop()     // return 2
 */


class ListNode {
    int val;
    ListNode next;
    ListNode (int data){
        val = data;
        next = null;
    }
}

interface InterfaceQueue {
    void push(int val);

    // define an interface for pop method
    /* write your code here */
    int pop();

    // define an interface for top method
    /* write your code here */
    int top();
}


public class MyQueue implements InterfaceQueue{
    
    private ListNode head;
    private ListNode tail;
    
    public MyQueue() {
        // do intialization if necessary
        
    }

    // implement the push method
    /* write your code here */
    public void push(int val){
        if (head == null){
            head = tail = new ListNode(val);
        }else{
            tail.next = new ListNode(val);
            tail = tail.next;
        }
    }

    @Override
    public int pop() {
        // write your code here
        if (head == null){
            throw new NoSuchElementException();
        }
        int ret = head.val;
        head = head.next;
        return ret;
    }

    //@Override
    public int top() {
        // write your code here
        if (head == null){
            throw new NoSuchElementException();
        }
        return head.val;
           
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue queue = new MyQueue();
 * queue.push(123);
 * queue.top(); will return 123;
 * queue.pop(); will return 123 and pop the first element in the queue
 */

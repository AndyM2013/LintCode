/**
 *40. Implement Queue by Two Stacks
  As the title described, you should only use two stacks to implement a queue's actions.

  The queue should support push(element), pop() and top() where pop is pop the first(a.k.a front) element in the queue.

  Both pop and top methods should return the value of first element.

  Example
  push(1)
  pop()     // return 1
  push(2)
  push(3)
  top()     // return 2
  pop()     // return 2
  Challenge
  implement it by two stacks, do not use any other data structure and push, pop and top should be O(1) by AVERAGE.
 */
 
//solution v1
 class ListNode{
    int val;
    ListNode next;
    ListNode(int data){
        val = data;
        next = null;
    }
}


public class MyQueue {
    private ListNode head;
    private ListNode tail;
    
    public MyQueue() {
        // do intialization if necessary
    }

    /*
     * @param element: An integer
     * @return: nothing
     */
    public void push(int element) {
        // write your code here
        if (head == null){
            head = tail = new ListNode(element);
        } else {
            tail.next = new ListNode(element);
            tail = tail.next;
        }
    }

    /*
     * @return: An integer
     */
    public int pop() {
        // write your code here
        if (head == null){
            throw new NullPointerException();
        }
        int ret = head.val;
        head = head.next;
        return ret;
    }

    /*
     * @return: An integer
     */
    public int top() {
        // write your code here
        if (head == null){
            throw new NullPointerException();
        }
        return head.val;
    }
}

423. Valid Parentheses
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

Example
The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.



public class Solution {
    /**
     * @param s: A string
     * @return: whether the string is a valid parentheses
     */
    public boolean isValidParentheses(String s) {
        // write your code here
        Stack<Character> stack = new Stack<Character>();
        for (Character c : s.toCharArray()){
            if ("({[".contains(s.valueOf(c))){
                stack.push(c);
            } else if (!stack.isEmpty() && isValid(stack.peek(), c)){
                stack.pop();
            } else {
                return false;
            }
        }
        return stack.isEmpty();
    }
    
    public boolean isValid(char ch1, char ch2){
        if (ch1 == '(' && ch2 == ')' || ch1 == '{' && ch2 == '}' || ch1 == '[' && ch2 == ']'){
            return true;
        }
        return false;
    }
}

/*
 *174. Remove Nth Node From End of List
  Given a linked list, remove the nth node from the end of list and return its head.

  Example
  Given linked list: 1->2->3->4->5->null, and n = 2.

  After removing the second node from the end, the linked list becomes 1->2->3->5->null.

  Challenge
  Can you do it without getting the length of the linked list?

  Notice
  The minimum number of nodes in list is n.
 */


/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param head: The first node of linked list.
     * @param n: An integer
     * @return: The head of linked list.
     */
    public ListNode removeNthFromEnd(ListNode head, int n) {
        // write your code here
        ListNode cur = head;
        if (head == null){
            return null;
        }
        int i = 0;
        
        while(cur != null){
            cur = cur.next;
            i++;
        }
        if (n == i){
            head = head.next;
            return head;
        } else {
            cur = head;
            int location = i - n - 1;
            while (location > 0){
                cur = cur.next;
                location--;
            }
            cur.next = cur.next.next;
        }
        return head;
    }
}
